import { createSlice } from "@reduxjs/toolkit";
import { fetchNicksAsync } from "./fetchNicksThunk";

// Define a type for the slice state
interface PlayersState {
  nicks: string[];
  status: "idle" | "loading" | "failed";
}

// Define the initial state using that type
const initialState: PlayersState = {
  nicks: [],
  status: "idle",
};

export const playersSlice = createSlice({
  name: "players",
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNicksAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchNicksAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.nicks = state.nicks.concat(action.payload);
      })
      .addCase(fetchNicksAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

//export const selectNicks = (state: RootState) => state.players.nicks;

export default playersSlice.reducer;
