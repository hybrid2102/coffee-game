import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { RootState } from "../../../app/store";

// Define a type for the slice state
interface PlayersState {
  nicks: string[];
  status: "idle" | "loading" | "failed";
}

// Define the initial state using that type
const initialState: PlayersState = {
  nicks: [],
  status: "idle",
};

export const fetchNicksAsync = createAsyncThunk(
  "fetchNicks",
  async (amount: number) => {
    // TODO: spostare apikey
    const config = {
      headers: {
        "X-Api-Key": "05f39093c75f41a4b57654df668017ee",
      },
      params: {
        nameType: "firstname",
        quantity: amount,
      },
    };
    const url = "https://randommer.io/api/Name";

    const { data } = await axios.get(url, config);
    return data as string[];
    /* .then(function (response) {
      // handle success
      console.log(response.data);
      return response.data as string[];
    }); */
    /* .catch(function (error) {
        // handle error
        console.log(error);
      })
      .finally(function () {
        // always executed
      }); */
  }
);

export const playersSlice = createSlice({
  name: "players",
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNicksAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchNicksAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.nicks = state.nicks.concat(action.payload);
      })
      .addCase(fetchNicksAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const selectNicks = (state: RootState) => state.players.nicks;

export default playersSlice.reducer;
